    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT name FROM ref") as cursor:
            builder = InlineKeyboardBuilder()
            async for name, in cursor:
                #print(name)
                builder.button(text=name, callback_data=refchoose(nick=name))
            builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–∞‚úè", callback_data='addref')
            builder.adjust(1)
    if call.data == 'backtoreflist':
        await bot.edit_message_text("–†–µ—Ñ—ã", call.message.chat.id, call.message.message_id, reply_markup=builder.as_markup())
    else:
        await bot.send_message(call.message.chat.id, "–†–µ—Ñ—ã", reply_markup=builder.as_markup())



—Ä–æ–∑—Å–∏–ª–∫–∞

    async with aiosqlite.connect("users.db") as db:
        succ = 0
        unsucc = 0
        async with db.execute("SELECT id FROM users") as cursor:
            async for i in cursor:
                try:
                    await bot.send_message(i[0], text, parse_mode="HTML", reply_markup=kb, disable_web_page_preview=True)
                    succ+=1
                except Exception as e:
                    unsucc+=1
                    #await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {i[0]}\n–ü—Ä–∏—á–∏–Ω–∞: {e}")

–æ–ø

    async with aiosqlite.connect("users.db") as db:
        async with db.execute('SELECT link, id FROM op') as cursor:
            builder = InlineKeyboardBuilder()
            async for i, j in cursor:
                builder.button(text=i, url=i)
                builder.button(text="‚ùå", callback_data=del_chn(id_=j))
            builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚úçüèª", callback_data='add')
            builder.adjust(2, 2)
            #buttons = [[InlineKeyboardButton(text="‚ùå", callback_data=del_(id_=1).pack())]]
            #kb = InlineKeyboardMarkup(inline_keyboard=buttons)
            #kb.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚úçüèª", callback_data="add"))]
    await bot.send_message(call.message.chat.id, "–ö–∞–Ω–∞–ª—ã:", reply_markup=builder.as_markup())

   @router.callback_query(del_chn.filter(), AdminFilter())
async def delete(call: CallbackQuery, callback_data: del_chn):
    print(callback_data.id_)
    try:
        async with aiosqlite.connect("users.db") as db:
            await db.execute(f"delete from op where id = {callback_data.id_}")
            await db.commit()
            await bot.send_message(call.message.chat.id, f"–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        await bot.send_message(call.message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n–ü—Ä–∏—á–∏–Ω–∞: {e}")


—Ä–µ—Ñ

    async with aiosqlite.connect("users.db") as db:
        async with db.execute("SELECT name FROM ref") as cursor:
            builder = InlineKeyboardBuilder()
            async for name, in cursor:
                #print(name)
                builder.button(text=name, callback_data=refchoose(nick=name))
            builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–∞‚úè", callback_data='addref')
            builder.adjust(1)

    async with aiosqlite.connect("users.db") as db:
        await db.execute(f'insert into ref("name") values("{message.text}")')
        await db.commit()

    async with aiosqlite.connect("users.db") as db:
        async with db.execute(f"SELECT * FROM ref where name = '{callback_data.nick}'") as cursor:
            async for name, amount in cursor:

        async with aiosqlite.connect("users.db") as db:
        await db.execute(f"delete from ref where name = '{callback_data.nick}'")

sql

    try:
        async with aiosqlite.connect("users.db") as db:
            cursor = await db.execute(message.text)
            await db.commit()
            await bot.send_message(message.chat.id, f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n{await cursor.fetchall()}")
    except Exception as e:
        await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å {message.text}\n–ü—Ä–∏—á–∏–Ω–∞: {e}")
    await state.clear()