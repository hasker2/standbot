import sqlite3

from aiogram.types import *
from aiogram.utils.keyboard import *
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, Text, CommandObject
from aiogram import Bot
from filters import AdminFilter, SubFilter
import asyncio
import aiosqlite
import sys
sys.path.append('..')
from databaseclass import UserDb, RefDb, token
from aiogram.utils.deep_linking import create_start_link

bot = Bot(token=token)
router = Router()

class StandId(StatesGroup):
    usid = State()

@router.message(Command(commands=['start']))
async def greets(message: Message, command: CommandObject):
    photo = FSInputFile('bot/fable.jpg')
    user = UserDb(message)
    builder = InlineKeyboardBuilder()
    builder.button(text='–û–¢–ö–†–´–¢–¨üìÇ', callback_data='getgold')
    await bot.send_photo(message.chat.id, photo, caption=f'–ü—Ä–∏–≤–µ—Ç\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å "Fable" case —Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ!', reply_markup=builder.as_markup())
    if_new = await user.add_user()
    try:
        # async with aiosqlite.connect("users.db", timeout=100) as db:
        #     await db.execute(f'insert into users ("id", "name", "surname", "lang", "date") values ("{message.chat.id}", "{message.from_user.first_name}", "{message.from_user.last_name}", "{message.from_user.language_code}", "{message.date}")')
        #     if (command.args):
        #         await db.execute(f'update ref set amount = amount + 1 where name = "{command.args}"')
        #     await db.commit()
        if command.args and if_new:
            if (command.args.isdigit()):
                await UserDb.increase(int(command.args))
                await bot.send_message(command.args, "–ö—Ç–æ-—Ç–æ –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ!")
            else:
                await RefDb.increase(command.args)
    except sqlite3.IntegrityError as e:
        pass
    except Exception as e:
        print(e)

@router.callback_query(Text(text='getgold'))
async def getgold(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await bot.send_message(call.message.chat.id, '–û–¢–ö–†–´–í–ê–ï–ú –ö–ï–ô–°')
    await bot.send_chat_action(call.message.chat.id, 'typing')
    await asyncio.sleep(2.5)
    photo = FSInputFile('bot/knife.jpg')
    builder = InlineKeyboardBuilder()
    builder.button(text='–ó–ê–õ–£–¢–ê–¢–¨ –ù–ê –°–í–û–ô –ê–ö–ö–ê–£–ù–¢‚úÖ', callback_data='getknife')
    await bot.send_photo(call.message.chat.id, photo, caption=f'<b><i>–ß–¢–û–û–û–û–ûüò±üò±</i></b>\n<u><b>–¢–´ –í–´–ë–ò–õ –ë–ê–ë–û–ß–ö–£ "BLACK WIDOW"</b></u>', reply_markup=builder.as_markup(), parse_mode="HTML")

@router.callback_query(Text(text='getknife'), SubFilter())
async def getknife(call: CallbackQuery, state: FSMContext):
    refs = await UserDb.get_refs(call.message.chat.id)
    print(refs)
    if refs < 5:
        keyboard = [[KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –Ω–æ–∂üî•")]]
        kb = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

        await bot.send_message(call.message.chat.id,
                               f"–¢–≤–æ–π –Ω–æ–∂ –≥–æ—Ç–æ–≤!\n–î–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—Å–∏ –≤—Å–µ–≥–æ –ª–∏—à—å 5 —á–µ–ª–æ–≤–µ–∫ –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ: {await create_start_link(bot, str(call.message.chat.id))}\n–¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {refs}/5\n–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª!",
                               reply_markup=kb)
        return
    await state.set_state(StandId.usid)
    await bot.send_message(call.message.chat.id, '–í–í–ï–î–ò –°–í–û–ô STANDOFF 2 ID')

@router.message(Text(text="–í—ã–≤–µ—Å—Ç–∏ –Ω–æ–∂üî•"))
async def refs(message: Message):
    refs = await UserDb.get_refs(message.chat.id)
    print(refs)
    if refs < 5:
        keyboard = [[KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –Ω–æ–∂üî•")]]
        kb = ReplyKeyboardMarkup(keyboard=keyboard)

        await bot.send_message(message.chat.id,
                               f"–¢–≤–æ–π –Ω–æ–∂ –≥–æ—Ç–æ–≤!\n–î–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—Å–∏ –≤—Å–µ–≥–æ –ª–∏—à—å 5 —á–µ–ª–æ–≤–µ–∫ –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ: {await create_start_link(bot, str(message.chat.id))}\n–¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {refs}/5\n–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª!",
                               reply_markup=kb)
    else:
        photo = FSInputFile('bot/knife.jpg')
        builder = InlineKeyboardBuilder()
        builder.button(text='–ó–ê–õ–£–¢–ê–¢–¨ –ù–ê –°–í–û–ô –ê–ö–ö–ê–£–ù–¢‚úÖ', callback_data='getknife')
        await bot.send_photo(message.chat.id, photo,
                             caption=f'<b><i>–¢–í–û–ô –ù–û–ñ –£–ñ–ï –ì–û–¢–û–í</i></b>\n<u><b>–ó–ê–ë–ï–†–ò –°–í–û–Æ –ë–ê–ë–û–ß–ö–£ "BLACK WIDOW"</b></u>',
                             reply_markup=builder.as_markup(), parse_mode="HTML")


@router.message(StandId.usid)
async def getid(message: Message, state: FSMContext):

    if message.text.isdigit():
        await bot.send_message(message.chat.id, f'–ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î –ù–û–ñ–ê BUTTERFLY "BLACK WIDOW" –ù–ê –ê–ö–ö–ê–ù–£–¢ {message.text} –ü–û–î–ê–ù–ê\n–°–ï–ô–ß–ê–° –û–ü–ï–†–ê–¢–û–† –û–¢–ü–ò–®–ï–¢ –ò –î–ê–°–¢ –ü–û–î–ê–õ–¨–®–ò–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò')
        await state.clear()
    else:
        await bot.send_message(message.chat.id,
                               f'–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π id‚ùó')






